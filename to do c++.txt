#include <iostream>
#include <vector>
#include <string>

using namespace std;

struct Task {
    string description;
    bool isCompleted;
};

void addTask(vector<Task>& tasks, const string& description) {
    tasks.push_back({description, false});
    cout << "Task added: " << description << endl;
}

void completeTask(vector<Task>& tasks, int index) {
    if (index < 0 || index >= tasks.size()) {
        cerr << "Invalid task number!" << endl;
        return;
    }
    tasks[index].isCompleted = true;
    cout << "Task completed: " << tasks[index].description << endl;
}


void viewTasks(const vector<Task>& tasks) {
    if (tasks.empty()) {
        cout << "No tasks available." << endl;
        return;
    }
    cout << "Current tasks:" << endl;
    for (size_t i = 0; i < tasks.size(); ++i) {
        cout << i + 1 << ". [" << (tasks[i].isCompleted ? "X" : " ") << "] " << tasks[i].description << endl;
    }
}

int main() {
    vector<Task> tasks;
    int choice;

    do {
        cout << "\nTo-Do List Application" << endl;
        cout << "1. Add a new task" << endl;
        cout << "2. Mark a task as completed" << endl;
        cout << "3. View all tasks" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        cin.ignore(); 

        switch (choice) {
            case 1: {
                string description;
                cout << "Enter task description: ";
                getline(cin, description);
                addTask(tasks, description);
                break;
            }
            case 2: {
                int taskNumber;
                cout << "Enter task number to mark as completed: ";
                cin >> taskNumber;
                completeTask(tasks, taskNumber - 1);
                break;
            }
            case 3: {
                viewTasks(tasks);
                break;
            }
            case 4:
                cout << "Exiting application." << endl;
                break;
            default:
                cerr << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 4);

    return 0;
}